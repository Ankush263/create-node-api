const { exec } = require('node:child_process');

class PgJsAPI {
	constructor(projectPath, isError, isSecurity, isAuth) {
		this.projectPath = projectPath;
		this.isError = isError;
		this.isSecurity = isSecurity;
		this.isAuth = isAuth;
	}

	generatePackageFile() {
		const packageName = '"name": "pg-api",\n';
		const packageVersion = '"version": "1.0.0",\n';
		const mainFile = '"main": "index.js",\n';
		const scripts =
			'"scripts": {\n    "migrate": "node-pg-migrate",\n    "dev": "nodemon",\n    "prod": "NODE_ENV=production node index.js"\n  },\n';
		const keywords = '"keywords": [],\n';
		const author = '"author": "",\n';
		const license = '"license": "ISC",\n';
		const description = '"description": "generated by create-node-api",\n';

		const bcrypt = '"bcryptjs": "^5.1.1"';
		const bodyParser = '"body-parser": "^1.20.2"';
		const cookieParser = '"cookie-parser": "^1.4.6"';
		const cors = '"cors": "^2.8.5"';
		const dotenv = '"dotenv": "^16.4.5"';
		const express = '"express": "^4.19.2"';
		const expressRateLimit = '"express-rate-limit": "^7.3.1"';
		const helmet = '"helmet": "^7.1.0"';
		const jsonWebToken = '"jsonwebtoken": "^9.0.2"';
		const nodePgMigrate = '"node-pg-migrate": "^7.5.2"';
		const pg = '"pg": "^8.12.0"';
		const validator = '"validator": "^13.12.0"';

		const devNodemon = '"nodemon": "^3.1.3"';

		const dependencies = `\n${
			this.isAuth ? `    ${bcrypt},\n` : ''
		}    ${bodyParser},\n${
			this.isAuth ? `    ${cookieParser},\n` : ''
		}    ${cors},\n    ${dotenv},\n    ${express},\n${
			this.isSecurity ? `    ${expressRateLimit},\n` : ''
		}${this.isSecurity ? `    ${helmet},\n` : ''}${
			this.isAuth ? `    ${jsonWebToken},\n` : ''
		}    ${nodePgMigrate},\n    ${pg},\n${
			this.isAuth ? `    ${validator}` : ''
		}    `;

		const devDependencies = `\n    ${devNodemon}`;

		const topPackageDetails = `${packageName}  ${packageVersion}  ${mainFile}  ${scripts}  ${keywords}  ${author}  ${license}  ${description}`;

		const packageCommand = `{\n  ${topPackageDetails}  "dependencies": ${
			dependencies.length > 0 ? `{  ${dependencies}\n  }` : '{}'
		},\n  "devDependencies": ${
			devDependencies.length > 0 ? `{  ${devDependencies}\n  }` : '{}'
		}\n}`;

		exec(
			`
				cd ${this.projectPath} 
				echo '${packageCommand}' > package.json
			`,
			(error, stdout, stderr) => {
				if (error) {
					console.error(error);
					return;
				}
				if (stderr) {
					console.error(stderr);
					return;
				}
			}
		);
	}

	generateEnvFile() {
		const jwtSecret = 'JWT_SECRET=';
		const jwtExpire = 'JWT_EXPIRES_IN=';
		const cookiesExpire = 'JWT_COOKIE_EXPIRES_IN=';
		const port = 'PORT=8000';
		const environment = 'NODE_ENV=development';

		const dbHost = 'HOST=';
		const dbPort = 'DB_PORT=';
		const database = 'DATABASE=';
		const user = 'USER=';
		const password = 'PASSWORD=';

		const envVariables = `${environment}\n${
			this.isAuth ? `${jwtSecret}\n` : ''
		}${this.isAuth ? `${jwtExpire}\n` : ''}${
			this.isAuth ? `${cookiesExpire}\n` : ''
		}${port}\n\n${dbHost}\n${dbPort}\n${database}\n${user}\n${password}`;

		exec(
			`
      cd ${this.projectPath} 
      echo '${envVariables}' > .env.example
    `,
			(error, stdout, stderr) => {
				if (error) {
					console.error(error);
					return;
				}
				if (stderr) {
					console.error(stderr);
					return;
				}
			}
		);
	}

	createAppFile() {
		const requireAppError = "const AppError = require('./utils/AppError');\n";
		const requireBodyParser = "const bodyParser = require('body-parser');\n";
		const requireCookieParser =
			"const cookieParser = require('cookie-parser');\n";
		const requireCors = "const cors = require('cors');\n";
		const requireExpress = "const express = require('express');\n";
		const requireGlobalErrorHandler =
			"const globalErrorHandler = require('./middlewares/global-error');\n";
		const requireHelmet = "const helmet = require('helmet');\n";
		const requireHpp = "const hpp = require('hpp');\n";
		const requireExpressMongoSanitize =
			"const mongoSanitize = require('express-mongo-sanitize');\n";
		const requireRateLimit =
			"const rateLimit = require('express-rate-limit');\n";
		const requireRoute = "const routes = require('../src/routes/index');\n";

		const defineApp = 'const app = express();';

		const useCors = 'app.use(cors());\n';
		const useHelmet = 'app.use(helmet());\n';
		const useCookieParser = 'app.use(cookieParser());\n';
		const useBodyParser = 'app.use(bodyParser.json());\n';
		const useHpp = 'app.use(hpp());\n';
		const useGlobalErrorHandler = 'app.use(globalErrorHandler);\n';
		const useMongoSanitize = 'app.use(mongoSanitize());\n';
		const useRoutes = "app.use('/api/v1', routes);\n\n";

		const setLimiter =
			"const limiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  limit: 100,\n  standardHeaders: 'draft-7',\n  legacyHeaders: false,\n})\n";

		const useRateLimit = 'app.use(limiter);\n\n';

		const handleWrongUrlError =
			"\napp.all('*', (req, res, next) => {\n  next(new AppError('Cant find ' + req.originalUrl + ' on this server!!', 404));\n});\n";

		const disableXPower = "app.disable('X-powered-by');\n\n";

		const exportApp = 'module.exports = app;';

		const allRequireStatements = `${
			this.isError ? requireAppError : ''
		}${requireBodyParser}${
			this.isAuth ? requireCookieParser : ''
		}${requireCors}${requireExpress}${
			this.isError ? requireGlobalErrorHandler : ''
		}${this.isSecurity ? requireHelmet : ''}${
			this.isSecurity ? requireHpp : ''
		}${this.isSecurity ? requireExpressMongoSanitize : ''}${
			this.isSecurity ? requireRateLimit : ''
		}${this.isAuth ? requireRoute : ''}`;

		const wrongUrlError = `${this.isError ? handleWrongUrlError : ''}`;

		const handleRateLimit = `${
			this.isSecurity ? `${setLimiter}\n${useRateLimit}` : ''
		}`;

		const handleDisableXPoweredBy = `${this.isSecurity ? disableXPower : ''}`;

		const handleUseRoutes = `${this.isAuth ? useRoutes : ''}`;

		const allUseStatemants = `${useCors}${this.isSecurity ? useHelmet : ''}${
			this.isAuth ? useCookieParser : ''
		}${useBodyParser}${this.isSecurity ? useHpp : ''}${
			this.isSecurity ? useMongoSanitize : ''
		}${this.isError ? useGlobalErrorHandler : ''}`;

		const appVariables =
			allRequireStatements +
			'\n' +
			defineApp +
			'\n' +
			wrongUrlError +
			'\n' +
			allUseStatemants +
			'\n' +
			handleRateLimit +
			handleDisableXPoweredBy +
			handleUseRoutes +
			exportApp;

		exec(
			`
      cd ${this.projectPath}
      cd src
      echo "${appVariables}" > app.js
    `,
			(error, stdout, stderr) => {
				if (error) {
					console.error(error);
					return;
				}
				if (stderr) {
					console.error(stderr);
					return;
				}
			}
		);
	}

	generateIndexFile() {
		const indexVariable = `const app = require('./src/app');
const dotenv = require('dotenv');
const pool = require('./src/pool');

dotenv.config();

const port = process.env.PORT || 8000;

const connect = async () => {
	try {
		await pool.connect({
			host: process.env.HOST,
			port: process.env.DB_PORT,
			database: process.env.DATABASE,
			user: process.env.USER,
			password: process.env.PASSWORD,
			ssl: {
				rejectUnauthorized: false,
			},
		});

		app.listen(port, () => {
			console.log('You are listening to the port ', port);
		});
	} catch (error) {
		console.error(error);
	}
};

connect();`;

		exec(
			`
      cd ${this.projectPath}
      echo "${indexVariable}" > index.js
    `,
			(error, stdout, stderr) => {
				if (error) {
					console.error(error);
					return;
				}
				if (stderr) {
					console.error(stderr);
					return;
				}
			}
		);
	}

	createAppFile() {
		const requireAppError = "const AppError = require('./utils/AppError');\n";
		const requireBodyParser = "const bodyParser = require('body-parser');\n";
		const requireCookieParser =
			"const cookieParser = require('cookie-parser');\n";
		const requireCors = "const cors = require('cors');\n";
		const requireExpress = "const express = require('express');\n";
		const requireGlobalErrorHandler =
			"const globalErrorHandler = require('./middlewares/global-error');\n";
		const requireHelmet = "const helmet = require('helmet');\n";
		const requireRateLimit =
			"const rateLimit = require('express-rate-limit');\n";
		const requireRoute = "const routes = require('./routes/index');\n";

		const defineApp = 'const app = express();';

		const useCors = 'app.use(cors());\n';
		const useHelmet = 'app.use(helmet());\n';
		const useCookieParser = 'app.use(cookieParser());\n';
		const useBodyParser = 'app.use(bodyParser.json());\n';
		const useHpp = 'app.use(hpp());\n';
		const useGlobalErrorHandler = 'app.use(globalErrorHandler);\n';
		const useRoutes = "app.use('/api/v1', routes);\n\n";

		const setLimiter =
			"const limiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  limit: 100,\n  standardHeaders: 'draft-7',\n  legacyHeaders: false,\n})\n";

		const useRateLimit = 'app.use(limiter);\n\n';

		const handleWrongUrlError =
			"\napp.all('*', (req, res, next) => {\n  next(new AppError('Cant find ' + req.originalUrl + ' on this server!!', 404));\n});\n";

		const disableXPower = "app.disable('X-powered-by');\n\n";

		const exportApp = 'module.exports = app;';

		const allRequireStatements = `${
			this.isError ? requireAppError : ''
		}${requireBodyParser}${
			this.isAuth ? requireCookieParser : ''
		}${requireCors}${requireExpress}${
			this.isError ? requireGlobalErrorHandler : ''
		}${this.isSecurity ? requireHelmet : ''}${
			this.isSecurity ? requireRateLimit : ''
		}${this.isAuth ? requireRoute : ''}`;

		const wrongUrlError = `${this.isError ? handleWrongUrlError : ''}`;

		const handleRateLimit = `${
			this.isSecurity ? `${setLimiter}\n${useRateLimit}` : ''
		}`;

		const handleDisableXPoweredBy = `${this.isSecurity ? disableXPower : ''}`;

		const handleUseRoutes = `${this.isAuth ? useRoutes : ''}`;

		const allUseStatemants = `${useCors}${this.isSecurity ? useHelmet : ''}${
			this.isAuth ? useCookieParser : ''
		}${useBodyParser}${this.isSecurity ? useHpp : ''}${
			this.isError ? useGlobalErrorHandler : ''
		}`;

		const appVariables =
			allRequireStatements +
			'\n' +
			defineApp +
			'\n' +
			wrongUrlError +
			'\n' +
			allUseStatemants +
			'\n' +
			handleRateLimit +
			handleDisableXPoweredBy +
			handleUseRoutes +
			exportApp;

		exec(
			`
      cd ${this.projectPath}
      cd src
      echo "${appVariables}" > app.js
    `,
			(error, stdout, stderr) => {
				if (error) {
					console.error(error);
					return;
				}
				if (stderr) {
					console.error(stderr);
					return;
				}
			}
		);
	}

	createPoolFile() {
		const poolVariables = `const pg = require('pg');

class Pool {
	_pool = null;

	connect(options) {
		this._pool = new pg.Pool(options);
		return this._pool.query('SELECT 1 + 1');
	}

	close() {
		return this._pool.end();
	}

	query(sql, params) {
		return this._pool.query(sql, params);
	}
}

module.exports = new Pool();`;

		exec(
			`
			cd ${this.projectPath}
			cd src
			echo "${poolVariables}" > pool.js
			`,
			(error, stdout, stderr) => {
				if (error) {
					console.error(error);
					return;
				}
				if (stderr) {
					console.error(stderr);
					return;
				}
			}
		);
	}

	createDataPoolFile() {
		const dataPoolVariable = `const pg = require('pg');
require('dotenv').config();

const pool = new pg.Pool({
	host: process.env.HOST,
	port: process.env.PG_PORT,
	database: process.env.DATABASE,
	user: process.env.USER,
	password: process.env.PASSWORD,
});

module.exports = pool;`;

		exec(
			`
			cd ${this.projectPath}
			cd migration/data
			echo "${dataPoolVariable}" > pool.js
			`,
			(error, stdout, stderr) => {
				if (error) {
					console.error(error);
					return;
				}
				if (stderr) {
					console.error(stderr);
					return;
				}
			}
		);
	}

	createToCamelCaseFile() {
		const toCamelCaseVariable = `const toCamelCase = (rows) => {
	return rows.map((row) => {
		const replaced = {};

		for (let key in row) {
			const camelCase = key.replace(/([-_][a-z])/gi, (\\$1) =>
				\\$1.toUpperCase().replace('_', '')
			);
			replaced[camelCase] = row[key];
		}

		return replaced;
	});
};

module.exports = toCamelCase;`;

		exec(
			`
			cd ${this.projectPath}
			cd src/repo/utils
			echo "${toCamelCaseVariable.replace(/"/g, '\\"')}" > to-camel-case.js
			`,
			(error, stdout, stderr) => {
				if (error) {
					console.error(error);
					return;
				}
				if (stderr) {
					console.error(stderr);
					return;
				}
			}
		);
	}

	generateGlobalErrorFile() {
		const globalErrorVariable = `const AppError = require('../utils/appError');

const handleNullError = (err) => {
	const message = 'Null Error: ' + err.column + ' can not be null';
	return new AppError(message, 401);
};

const handleConnectionError = (err) => {
	const message = 'Connection failure';
	return new AppError(message, 401);
};

const handleSQLConnectionError = (err) => {
	const message = 'SQL Connection failure';
	return new AppError(message, 401);
};

const handleInvalidInput = (err) => {
	const message = 'Invalid Inputs';
	return new AppError(message, 401);
};

const sendErrorDev = (err, res) => {
	res.status(err.statusCode).json({
		status: err.status,
		error: err,
		message: err.message,
		stack: err.stack,
	});
};

const sendErrorProd = (err, res) => {
	if (err.isOperational) {
		res.status(err.statusCode).json({
			status: err.status,
			message: err.message,
		});
	} else {
		res.status(500).json({
			status: 'error',
			message: 'Something went very wrong!',
		});
	}
};

module.exports = (err, req, res, next) => {
	err.statusCode = err.statusCode || 500;
	err.status = err.status || 'error';

	res.set('Access-Control-Allow-Origin', '*');

	if (process.env.NODE_ENV === 'development') {
		sendErrorDev(err, res);
	} else if (process.env.NODE_ENV === 'production') {
		let error = err;

		if (error.code === '23502') error = handleNullError(error);
		if (
			error.code === '08000' ||
			error.code === '08003' ||
			error.code === '08006'
		)
			error = handleConnectionError(error);
		if (error.code === '08001' || error.code === '08004')
			error = handleSQLConnectionError(error);
		if (error.code === '22P02') error = handleInvalidInput(err);

		sendErrorProd(error, res);
	}
};`;

		exec(
			`
			mkdir -p ${this.projectPath}/src/middlewares &&
			echo "${globalErrorVariable}" > ${this.projectPath}/src/middlewares/global-error.js
		`,
			(error, stdout, stderr) => {
				if (error) {
					console.error(error);
					return;
				}
				if (stderr) {
					console.error(stderr);
					return;
				}
			}
		);
	}
}

module.exports = PgJsAPI;
